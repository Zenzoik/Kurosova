import logging
import json
import os
from mal import Anime
import random
from aiogram.utils.markdown import hide_link
from database import get_user_rating_info

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
ANIME_DATA_FILE = 'anime_data_filtered.json'

async def get_anime_info_by_mal_id(mal_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ –ø–æ –µ–≥–æ MAL ID
    
    Args:
        mal_id: ID –∞–Ω–∏–º–µ –Ω–∞ MyAnimeList
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–Ω–∏–º–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        anime = Anime(mal_id)
        if anime.title is None:
            logger.error(f"–ê–Ω–∏–º–µ —Å MAL ID {mal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return None

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_rating_info = await get_user_rating_info(mal_id)
        if not user_rating_info:
            user_rating_info = {"avg_rating": 0, "rating_count": 0}

        anime_info = {
            'mal_id': mal_id,
            'title': anime.title,
            'image_url': anime.image_url,
            'score': anime.score,
            'type': anime.type,
            'episodes': anime.episodes,
            'synopsis': anime.synopsis,
            'user_avg_rating': user_rating_info.get('avg_rating', 0),
            'user_rating_count': user_rating_info.get('rating_count', 0)
        }

        # –°–ª–µ–¥—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        # –≤ –±—É–¥—É—â–µ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
        # add_to_cache(mal_id, anime_info)
        
        return anime_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ MAL API –¥–ª—è MAL ID {mal_id}: {e}")
        return None

def load_collected_anime_data():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∞–Ω–∏–º–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        if not os.path.exists(ANIME_DATA_FILE):
            logger.error(f"–§–∞–π–ª {ANIME_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
            
        with open(ANIME_DATA_FILE, 'r', encoding='utf-8') as file:
            anime_list = json.load(file)
        return anime_list
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–Ω–∏–º–µ: {e}")
        return []

def check_attributes(anime):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —É –æ–±—ä–µ–∫—Ç–∞ –∞–Ω–∏–º–µ
    
    Args:
        anime: –û–±—ä–µ–∫—Ç –∞–Ω–∏–º–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    """
    attributes_to_check = ['title', 'scored_by', 'type', 'episodes', 'score', 'image_url']
    missing_attributes = []
    for attr in attributes_to_check:
        if getattr(anime, attr, None) is None:
            missing_attributes.append(attr)
    return missing_attributes

def select_random_anime_from_collected(anime_list):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    
    Args:
        anime_list: –°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ –¥–ª—è –≤—ã–±–æ—Ä–∞
        
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–Ω–∏–º–µ
    """
    if not anime_list:
        logger.error("–°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ –ø—É—Å—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ")
        return None
        
    try:
        random_anime = random.choice(anime_list)
        anime_info = (
            f"üñä –ù–∞–∑–≤–∞–Ω–∏–µ: {random_anime['title']}\n"
            f"üñ• –¢–∏–ø: {random_anime['type']}\n"
            f"üóÉ –≠–ø–∏–∑–æ–¥—ã: {random_anime['episodes']}\n"
            f"‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞ –Ω–∞ MAL: {random_anime['score']}\n"
            f"ü§ô –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {random_anime['scored_by']}\n"
            f"{hide_link(random_anime['image_url'])}"
        )
        return {
            "info": anime_info,
            "id": random_anime['id'],
            "photo": random_anime['image_url'],
            "title": random_anime['title']
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–Ω–∏–º–µ: {e}")
        return None

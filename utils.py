import logging
from database import get_user_rating_info
import json
from mal import Anime
import random
from aiogram.utils.markdown import hide_link

async def get_anime_info_by_mal_id(mal_id):
    # # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
    # cached_data = get_from_cache(mal_id)
    # if cached_data:
    #     logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è MAL ID: {mal_id}")
    #     return cached_data

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ MAL –∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        anime = Anime(mal_id)
        if anime.title is None:
            logging.error(f"–ê–Ω–∏–º–µ —Å MAL ID {mal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return None

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_rating_info = await get_user_rating_info(mal_id)

        anime_info = {
            'mal_id': mal_id,
            'title': anime.title,
            'image_url': anime.image_url,
            'score': anime.score,
            'type': anime.type,
            'episodes': anime.episodes,
            'synopsis': anime.synopsis,
            'user_avg_rating': user_rating_info.get('avg_rating', 0),  # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            'user_rating_count': user_rating_info.get('rating_count', 0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫—ç—à —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
        # add_to_cache(mal_id, anime_info)
        return anime_info
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ MAL API –¥–ª—è MAL ID {mal_id}: {e}")
        return None

def load_collected_anime_data():
    with open('anime_data_filtered.json', 'r') as file:
        anime_list = json.load(file)
    return anime_list


def check_attributes(anime):
    attributes_to_check = ['title', 'scored_by', 'type', 'episodes', 'score', 'image_url']
    missing_attributes = []
    for attr in attributes_to_check:
        if getattr(anime, attr, None) is None:
            missing_attributes.append(attr)
    return missing_attributes

def load_collected_anime_data():
    with open('anime_data_filtered.json', 'r') as file:
        anime_list = json.load(file)
    return anime_list

def select_random_anime_from_collected(anime_list):
    random_anime = random.choice(anime_list)
    anime_info = f"üñä –ù–∞–∑–≤–∞–Ω–∏–µ: {random_anime['title']}\n üñ• –¢–∏–ø: {random_anime['type']}\n üóÉ –≠–ø–∏–∑–æ–¥—ã: {random_anime['episodes']}\n ‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞ –Ω–∞ MAL: {random_anime['score']}\n ü§ô –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {random_anime['scored_by']}\n {hide_link(random_anime['image_url'])}"
    return {"info": anime_info, "id": random_anime['id'], "photo": random_anime['image_url'], "title": random_anime['title']}

from bot.utils.utils import get_anime_info_by_mal_id
from bot.services.database import get_user_ratings
import logging
import asyncio
from aiogram import Router, types
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, LinkPreviewOptions
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()

@router.inline_query(lambda query: query.query == "my")
async def show_user_rated_anime(inline_query: InlineQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–µ, –æ—Ü–µ–Ω—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    
    offset = int(inline_query.offset) if inline_query.offset else 0
    user_id = inline_query.from_user.id

    logging.info("–í—ã–∑–≤–∞–Ω show_user_rated_anime")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (–æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    user_ratings = await get_user_ratings(user_id, offset, 5)

    if not user_ratings:
        logging.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –Ω–µ—Ç –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ.")
        return await inline_query.answer([], is_personal=True, cache_time=0)

    # **–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è**
    tasks = [get_anime_info_by_mal_id(mal_id) for mal_id in user_ratings.keys()]
    anime_infos = await asyncio.gather(*tasks, return_exceptions=True)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    articles = []
    for anime_info, (mal_id, rating) in zip(anime_infos, user_ratings.items()):
        if isinstance(anime_info, Exception):
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ MAL API –¥–ª—è MAL ID {mal_id}: {anime_info}")
            continue

        if not anime_info:
            logging.error(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ MAL ID {mal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            continue

        title = anime_info['title']
        thumb_url = anime_info['image_url']
        score = anime_info['score']

        input_content = InputTextMessageContent(
            message_text=f"üñä –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                         f"‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞ –Ω–∞ MAL: {score}\n"
                         f"‚≠êÔ∏è –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating}\n"
                         f"üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {anime_info.get('user_avg_rating', '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫')}\n"
                         f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {anime_info.get('user_rating_count', 0)}\n"
                         "\u2800",
            parse_mode='HTML',
            link_preview_options=LinkPreviewOptions(
                url=thumb_url,
                prefer_small_media=True,
                show_above_text=False
            )
        )

        reply_markup = None
        if inline_query.chat_type == "sender":
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–æ—Ü–µ–Ω–∏—Ç—å", callback_data=f"rate_anime:{mal_id}"))
            reply_markup = builder.as_markup()

        article = InlineQueryResultArticle(
            id=str(mal_id),
            title=title,
            description=f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating}",
            input_message_content=input_content,
            thumb_url=thumb_url,
            reply_markup=reply_markup
        )
        articles.append(article)

    # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ 5 –∞–Ω–∏–º–µ, –¥–æ–±–∞–≤–ª—è–µ–º `next_offset` –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–∏—Ö
    next_offset = str(offset + 5) if len(user_ratings) == 5 else ""

    await inline_query.answer(articles, is_personal=True, cache_time=0, next_offset=next_offset)

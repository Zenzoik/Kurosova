# bot/handlers/inline_search_my.py
from bot.utils.utils import get_anime_info_by_mal_id
from bot.services.database import (
    get_user_ratings,
    get_user_rating_info,
    get_user_rating_for_anime,
)
import asyncio, logging
from aiogram import Router, types
from aiogram.types import (
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
    LinkPreviewOptions,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()


@router.inline_query(lambda q: q.query == "my")
async def show_user_rated_anime(inline_query: InlineQuery) -> None:
    """–û—Ç–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ü–µ–Ω–∏–ª."""

    offset = int(inline_query.offset or 0)
    user_id = inline_query.from_user.id
    logging.info("–í—ã–∑–≤–∞–Ω show_user_rated_anime")

    # 1. –ë–µ—Ä—ë–º –∏–∑ –ë–î –º–∞–∫—Å–∏–º—É–º 5 –∑–∞–ø–∏—Å–µ–π –Ω–∞—á–∏–Ω–∞—è —Å offset
    user_ratings = await get_user_ratings(user_id, offset, 5)  # {mal_id: rating}

    if not user_ratings:
        await inline_query.answer([], is_personal=True, cache_time=0)
        return

    mal_ids = list(user_ratings.keys())

    # 2. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–æ—Å—Ç–∞—ë–º MAL-–¥–∞–Ω–Ω—ã–µ –∏ —Å–≤–µ–∂—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    anime_infos, stats = await asyncio.gather(
        asyncio.gather(*(get_anime_info_by_mal_id(mid) for mid in mal_ids),
                       return_exceptions=True),
        asyncio.gather(*(get_user_rating_info(mid) for mid in mal_ids))
    )

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º InlineQueryResultArticle-—Å–ø–∏—Å–æ–∫
    articles: list[InlineQueryResultArticle] = []

    for mal_id, info, stat in zip(mal_ids, anime_infos, stats):
        if isinstance(info, Exception) or not info:
            logging.error(f"–û—à–∏–±–∫–∞ MAL API –¥–ª—è id={mal_id}: {info}")
            continue

        title      = info["title"]
        thumb_url  = info["image_url"]
        mal_score  = info["score"]
        my_rating  = user_ratings[mal_id]
        avg        = stat["avg_rating"] or 0
        cnt        = stat["rating_count"]

        text = (
            f"üñä –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞ –Ω–∞ MAL: {mal_score}\n"
            f"‚≠êÔ∏è –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {my_rating}\n"
            f"üé∫ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {avg:.1f}\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {cnt}"
            "\u2800"          # –Ω–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª, —á—Ç–æ–±—ã Telegram –Ω–µ —É—Ä–µ–∑–∞–ª —Å–Ω–∏–∑—É
        )
        input_content = InputTextMessageContent(
            message_text=text,
            parse_mode="HTML",
            link_preview_options=LinkPreviewOptions(
                url=thumb_url,
                prefer_small_media=True,
                show_above_text=False,
            ),
        )

        # –∫–Ω–æ–ø–∫–∞ ¬´–ü–µ—Ä–µ–æ—Ü–µ–Ω–∏—Ç—å¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
        reply_markup = None
        if inline_query.chat_type == "sender":
            kb = InlineKeyboardBuilder()
            kb.add(types.InlineKeyboardButton(
                text="–ü–µ—Ä–µ–æ—Ü–µ–Ω–∏—Ç—å",
                callback_data=f"rate_anime:{mal_id}",
            ))
            reply_markup = kb.as_markup()

        articles.append(
            InlineQueryResultArticle(
                id=str(mal_id),
                title=title,
                description=f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {my_rating}",
                input_message_content=input_content,
                thumb_url=thumb_url,
                reply_markup=reply_markup,
            )
        )

    # 4. next_offset –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    next_offset = str(offset + 5) if len(user_ratings) == 5 else ""

    await inline_query.answer(
        articles, is_personal=True, cache_time=0, next_offset=next_offset
    )
